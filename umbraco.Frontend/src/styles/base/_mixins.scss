/* Media Queries
--------------------------------------------------------------------------------*/
@mixin respond-below($name) {
  $breakpoint-value: _breakpoint($name);
  @media screen and (max-width: em($breakpoint-value - 1)) {
    @content;
  }
}

@mixin respond-between($name1, $name2) {
  $breakpoint-value1: _breakpoint($name1);
  $breakpoint-value2: _breakpoint($name2);
  @media only screen and (min-width: em($breakpoint-value1)) and (max-width: em($breakpoint-value2 - 1px)) {
    @content;
  }
}

@mixin respond-above($name) {
  $breakpoint-value: _breakpoint($name);
  @media screen and (min-width: em($breakpoint-value)) {
    @content;
  }
}

/* Typography
--------------------------------------------------------------------------------*/
@mixin _text-size($text-size, $name: "phone") {
  $text-size-properties: _text-properties-for($text-size, $name);

  @if $text-size-properties != null {
    font-size: map-get($text-size-properties, "font-size") !important;
    line-height: map-get($text-size-properties, "line-height") !important;
  }
  @else {
    @warn "Breakpoint '#{$name}' for text size '#{$text-size}' is not defined";
  }
}

@mixin responsive-text-size($text-size, $default-breakpoint: "phone") {
  @include _text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: _text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $name in $text-breakpoints-keys {
    @if $name != $default-breakpoint and breakpoint($name) != null {
      @include respond-above($name) {
        @include _text-size($text-size, $name);
      }
    }
  }
}